services:
  # PostgreSQL Database
  postgres-db:
    image: postgres:15-alpine
    container_name: postgres-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Go Gin Server
  go-server:
    build:
      context: ./go-server
      dockerfile: Dockerfile
    container_name: go-server
    environment:
      - GO_PORT=${GO_SERVER_PORT}
      - GIN_MODE=${GIN_MODE}
    ports:
      - "${GO_SERVER_PORT}:${GO_SERVER_PORT}"
    networks:
      - microservices-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:${GO_SERVER_PORT}/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Node.js Express Server
  nodejs-server:
    build:
      context: ./nodejs-server
      dockerfile: Dockerfile
    container_name: nodejs-server
    environment:
      - NODE_ENV=${NODE_ENV}
      - NODE_PORT=${NODE_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - GO_SERVER_HOST=${GO_SERVER_HOST}
      - GO_SERVER_PORT=${GO_SERVER_PORT}
    ports:
      - "${NODE_PORT}:${NODE_PORT}"
    depends_on:
      postgres-db:
        condition: service_healthy
      go-server:
        condition: service_healthy
    networks:
      - microservices-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:${NODE_PORT}/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  microservices-network:
    driver: bridge
